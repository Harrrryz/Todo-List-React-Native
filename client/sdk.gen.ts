// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { SystemHealthData, SystemHealthResponses, AccountLoginData, AccountLoginResponses, AccountLoginErrors, AccountLogoutData, AccountLogoutResponses, AccountProfileData, AccountProfileResponses, AccountRegisterData, AccountRegisterResponses, AccountRegisterErrors, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserData, GetUserResponses, GetUserErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, AssignUserRoleData, AssignUserRoleResponses, AssignUserRoleErrors, RevokeUserRoleData, RevokeUserRoleResponses, RevokeUserRoleErrors, CreateTagData, CreateTagResponses, CreateTagErrors, ListTodosData, ListTodosResponses, ListTodosErrors, CreateTodoData, CreateTodoResponses, CreateTodoErrors, DeleteTagData, DeleteTagResponses, DeleteTagErrors, DeleteTodoData, DeleteTodoResponses, DeleteTodoErrors, GetTodoData, GetTodoResponses, GetTodoErrors, UpdateTodoData, UpdateTodoResponses, UpdateTodoErrors, ListTagsData, ListTagsResponses, ListTagsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health Check
 * Execute a health check against backend components.  Returns system information including database and cache status.
 */
export const systemHealth = <ThrowOnError extends boolean = false>(options?: Options<SystemHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SystemHealthResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/health',
        ...options
    });
};

/**
 * Login
 * Authenticate a user.
 */
export const accountLogin = <ThrowOnError extends boolean = false>(options: Options<AccountLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccountLoginResponses, AccountLoginErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Account Logout
 */
export const accountLogout = <ThrowOnError extends boolean = false>(options?: Options<AccountLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountLogoutResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access/logout',
        ...options
    });
};

/**
 * Profile
 * User Profile.
 */
export const accountProfile = <ThrowOnError extends boolean = false>(options?: Options<AccountProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccountProfileResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/me',
        ...options
    });
};

/**
 * Signup
 * User Signup.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(options: Options<AccountRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccountRegisterResponses, AccountRegisterErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ListUsers
 * List users.
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options
    });
};

/**
 * CreateUser
 * Create a new user.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteUser
 * Delete a user from the system.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * GetUser
 * Get a user.
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * UpdateUser
 * Create a new user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * AssignRole
 * Create a new migration role.
 */
export const assignUserRole = <ThrowOnError extends boolean = false>(options: Options<AssignUserRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignUserRoleResponses, AssignUserRoleErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{role_slug}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * RevokeRole
 * Delete a role from the system.
 */
export const revokeUserRole = <ThrowOnError extends boolean = false>(options: Options<RevokeUserRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeUserRoleResponses, RevokeUserRoleErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{role_slug}/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * CreateTag
 * Create a new tag.
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponses, CreateTagErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/create_tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ListTodos
 * List all todo items.
 */
export const listTodos = <ThrowOnError extends boolean = false>(options?: Options<ListTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTodosResponses, ListTodosErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos',
        ...options
    });
};

/**
 * CreateTodo
 * Create a new todo item.
 */
export const createTodo = <ThrowOnError extends boolean = false>(options: Options<CreateTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTodoResponses, CreateTodoErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteTag
 * Delete a specific tag by ID.
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponses, DeleteTagErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/delete_tag/{tag_id}',
        ...options
    });
};

/**
 * DeleteTodo
 * Delete a specific todo item by ID.
 */
export const deleteTodo = <ThrowOnError extends boolean = false>(options: Options<DeleteTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTodoResponses, DeleteTodoErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{todo_id}',
        ...options
    });
};

/**
 * GetTodo
 * Get a specific todo item by ID.
 */
export const getTodo = <ThrowOnError extends boolean = false>(options: Options<GetTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTodoResponses, GetTodoErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{todo_id}',
        ...options
    });
};

/**
 * UpdateTodo
 * Update a specific todo item by ID.
 */
export const updateTodo = <ThrowOnError extends boolean = false>(options: Options<UpdateTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTodoResponses, UpdateTodoErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{todo_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ListTags
 * List all tags for the current user.
 */
export const listTags = <ThrowOnError extends boolean = false>(options?: Options<ListTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTagsResponses, ListTagsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/tags',
        ...options
    });
};