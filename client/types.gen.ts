// This file is auto-generated by @hey-api/openapi-ts

/**
 * AccountLogin
 */
export type AccountLogin = {
    username: string;
    password: string;
};

/**
 * AccountRegister
 */
export type AccountRegister = {
    email: string;
    password: string;
    name?: string | null;
};

/**
 * Importance
 * Importance levels for todo items.
 */
export type Importance = 'none' | 'low' | 'medium' | 'high';

/**
 * Message
 */
export type Message = {
    message: string;
};

/**
 * OAuth2Login
 */
export type OAuth2Login = {
    access_token: string;
    token_type: string;
    refresh_token?: string | null;
    expires_in?: number | null;
};

/**
 * OauthAccount
 */
export type OauthAccount = {
    id: string;
    oauth_name: string;
    access_token: string;
    account_id: string;
    account_email: string;
    expires_at?: number | null;
    refresh_token?: string | null;
};

/**
 * SystemHealth
 */
export type SystemHealth = {
    database_status: 'online' | 'offline';
    app?: string;
    version?: string;
};

/**
 * TagCreate
 */
export type TagCreate = {
    name: string;
    color?: string | null;
    todoid?: string | null;
};

/**
 * TagModel
 */
export type TagModel = {
    id: string;
    name: string;
    color?: string | null;
    user_id: string;
};

/**
 * TodoCreate
 */
export type TodoCreate = {
    item: string;
    description?: string | null;
    plantime?: string | null;
    importance?: Importance;
    tags?: Array<string> | null;
};

/**
 * TodoModel
 */
export type TodoModel = {
    id: string;
    item: string;
    description?: string | null;
    created_time: string;
    plan_time?: string | null;
    importance: Importance;
    user_id: string;
    tags?: Array<string> | null;
};

/**
 * User
 */
export type User = {
    id: string;
    email: string;
    name?: string | null;
    is_superuser?: boolean;
    is_active?: boolean;
    is_verified?: boolean;
    has_password?: boolean;
    roles?: Array<UserRole> | null;
    oauth_accounts?: Array<OauthAccount> | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
    email: string;
    password: string;
    name?: string | null;
    issuperuser?: boolean;
    isactive?: boolean;
    isverified?: boolean;
};

/**
 * UserRole
 */
export type UserRole = {
    role_id: string;
    role_slug: string;
    role_name: string;
    assigned_at: string;
};

/**
 * UserRoleAdd
 */
export type UserRoleAdd = {
    username: string;
};

/**
 * UserRoleRevoke
 */
export type UserRoleRevoke = {
    username: string;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    email?: string | null;
    password?: string | null;
    name?: string | null;
    issuperuser?: boolean | null;
    isactive?: boolean | null;
    isverified?: boolean | null;
};

export type SystemHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type SystemHealthResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: SystemHealth;
};

export type SystemHealthResponse = SystemHealthResponses[keyof SystemHealthResponses];

export type AccountLoginData = {
    body: AccountLogin;
    path?: never;
    query?: never;
    url: '/api/access/login';
};

export type AccountLoginErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AccountLoginError = AccountLoginErrors[keyof AccountLoginErrors];

export type AccountLoginResponses = {
    /**
     * Document created, URL follows
     */
    201: OAuth2Login;
};

export type AccountLoginResponse = AccountLoginResponses[keyof AccountLoginResponses];

export type AccountLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/access/logout';
};

export type AccountLogoutResponses = {
    /**
     * Document created, URL follows
     */
    201: {
        [key: string]: unknown;
    };
};

export type AccountLogoutResponse = AccountLogoutResponses[keyof AccountLogoutResponses];

export type AccountProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/me';
};

export type AccountProfileResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: User;
};

export type AccountProfileResponse = AccountProfileResponses[keyof AccountProfileResponses];

export type AccountRegisterData = {
    body: AccountRegister;
    path?: never;
    query?: never;
    url: '/api/access/signup';
};

export type AccountRegisterErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AccountRegisterError = AccountRegisterErrors[keyof AccountRegisterErrors];

export type AccountRegisterResponses = {
    /**
     * Document created, URL follows
     */
    201: User;
};

export type AccountRegisterResponse = AccountRegisterResponses[keyof AccountRegisterResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string> | null;
        createdBefore?: string | null;
        createdAfter?: string | null;
        updatedBefore?: string | null;
        updatedAfter?: string | null;
        /**
         * Field to search
         */
        searchString?: string | null;
        /**
         * Search should be case sensitive
         */
        searchIgnoreCase?: boolean | null;
        currentPage?: number;
        pageSize?: number;
        /**
         * Order by field
         */
        orderBy?: string | null;
        /**
         * Field to search
         */
        sortOrder?: 'asc' | 'desc' | null;
    };
    url: '/api/users';
};

export type ListUsersErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<User>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Document created, URL follows
     */
    201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * User ID
         * The user to delete.
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type DeleteUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Request fulfilled, nothing follows
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * User ID
         * The user to retrieve.
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type GetUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UserUpdate;
    path: {
        /**
         * User ID
         * The user to update.
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type UpdateUserErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: User;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type AssignUserRoleData = {
    body: UserRoleAdd;
    path: {
        /**
         * Role Slug
         * The role to grant.
         */
        role_slug: string;
    };
    query?: never;
    url: '/api/roles/{role_slug}/assign';
};

export type AssignUserRoleErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type AssignUserRoleError = AssignUserRoleErrors[keyof AssignUserRoleErrors];

export type AssignUserRoleResponses = {
    /**
     * Document created, URL follows
     */
    201: Message;
};

export type AssignUserRoleResponse = AssignUserRoleResponses[keyof AssignUserRoleResponses];

export type RevokeUserRoleData = {
    body: UserRoleRevoke;
    path: {
        /**
         * Role Slug
         * The role to revoke.
         */
        role_slug: string;
    };
    query?: never;
    url: '/api/roles/{role_slug}/revoke';
};

export type RevokeUserRoleErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type RevokeUserRoleError = RevokeUserRoleErrors[keyof RevokeUserRoleErrors];

export type RevokeUserRoleResponses = {
    /**
     * Document created, URL follows
     */
    201: Message;
};

export type RevokeUserRoleResponse = RevokeUserRoleResponses[keyof RevokeUserRoleResponses];

export type CreateTagData = {
    body: TagCreate;
    path?: never;
    query?: never;
    url: '/todos/create_tag';
};

export type CreateTagErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
    /**
     * Document created, URL follows
     */
    201: TagModel;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type ListTodosData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string> | null;
        createdBefore?: string | null;
        createdAfter?: string | null;
        updatedBefore?: string | null;
        updatedAfter?: string | null;
        /**
         * Field to search
         */
        searchString?: string | null;
        /**
         * Search should be case sensitive
         */
        searchIgnoreCase?: boolean | null;
        currentPage?: number;
        pageSize?: number;
        /**
         * Order by field
         */
        orderBy?: string | null;
        /**
         * Field to search
         */
        sortOrder?: 'asc' | 'desc' | null;
    };
    url: '/todos';
};

export type ListTodosErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ListTodosError = ListTodosErrors[keyof ListTodosErrors];

export type ListTodosResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<TodoModel>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ListTodosResponse = ListTodosResponses[keyof ListTodosResponses];

export type CreateTodoData = {
    body: TodoCreate;
    path?: never;
    query?: never;
    url: '/todos';
};

export type CreateTodoErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type CreateTodoError = CreateTodoErrors[keyof CreateTodoErrors];

export type CreateTodoResponses = {
    /**
     * Document created, URL follows
     */
    201: TodoModel;
};

export type CreateTodoResponse = CreateTodoResponses[keyof CreateTodoResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        tag_id: string;
    };
    query?: never;
    url: '/todos/delete_tag/{tag_id}';
};

export type DeleteTagErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type DeleteTagError = DeleteTagErrors[keyof DeleteTagErrors];

export type DeleteTagResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: string | TagModel;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type DeleteTodoData = {
    body?: never;
    path: {
        todo_id: string;
    };
    query?: never;
    url: '/todos/{todo_id}';
};

export type DeleteTodoErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type DeleteTodoError = DeleteTodoErrors[keyof DeleteTodoErrors];

export type DeleteTodoResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: string | TodoModel;
};

export type DeleteTodoResponse = DeleteTodoResponses[keyof DeleteTodoResponses];

export type GetTodoData = {
    body?: never;
    path: {
        todo_id: string;
    };
    query?: never;
    url: '/todos/{todo_id}';
};

export type GetTodoErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type GetTodoError = GetTodoErrors[keyof GetTodoErrors];

export type GetTodoResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: TodoModel | string;
};

export type GetTodoResponse = GetTodoResponses[keyof GetTodoResponses];

export type UpdateTodoData = {
    body: TodoCreate;
    path: {
        todo_id: string;
    };
    query?: never;
    url: '/todos/{todo_id}';
};

export type UpdateTodoErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type UpdateTodoError = UpdateTodoErrors[keyof UpdateTodoErrors];

export type UpdateTodoResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: string | TodoModel;
};

export type UpdateTodoResponse = UpdateTodoResponses[keyof UpdateTodoResponses];

export type ListTagsData = {
    body?: never;
    path?: never;
    query?: {
        ids?: Array<string> | null;
        createdBefore?: string | null;
        createdAfter?: string | null;
        updatedBefore?: string | null;
        updatedAfter?: string | null;
        /**
         * Field to search
         */
        searchString?: string | null;
        /**
         * Search should be case sensitive
         */
        searchIgnoreCase?: boolean | null;
        currentPage?: number;
        pageSize?: number;
        /**
         * Order by field
         */
        orderBy?: string | null;
        /**
         * Field to search
         */
        sortOrder?: 'asc' | 'desc' | null;
    };
    url: '/todos/tags';
};

export type ListTagsErrors = {
    /**
     * Validation Exception
     */
    400: {
        status_code: number;
        detail: string;
        extra?: null | Array<unknown> | Array<unknown>;
    };
};

export type ListTagsError = ListTagsErrors[keyof ListTagsErrors];

export type ListTagsResponses = {
    /**
     * Request fulfilled, document follows
     */
    200: {
        items?: Array<TagModel>;
        /**
         * Maximal number of items to send.
         */
        limit?: number;
        /**
         * Offset from the beginning of the query.
         */
        offset?: number;
        /**
         * Total number of items.
         */
        total?: number;
    };
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};